• show dbs : shows all the collections in your database.
• exit : to close the connection between MongoAtlas and CLI.

## NOTE ##  : All these commands will be pasted directly on the cmd from the directory where the out/file file is to be located.
// For any commands that are not listed in this list follow: https://docs.mongodb.com/database-tools/

# mongoimport, mongoexport, mongodump and mongorestore

mongoimport and mongoexport uses JSON format to import and export files.
However, mongodump and mongorestore uses Binary JSON (BSON) format to import and export collections/databases to/from Mongo Atlas Cluster.

• mongoexport --uri="" collection= out=
{
    uri stands for Uniform Resource Identifier. Its syntax is --uri="mongodb+srv://user:password@<cluster>.mongodb.net/database"
    collection specifies the collection in database that we want to export from.
    out specifies the file type which we want to export as.
} 

eg.: mongoexport --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1 --out=import_export_coll1.json

• mongoimport --uri="" collection= file=
{
    uri stands for Uniform Resource Identifier. Its syntax is --uri="mongodb+srv://user:password@<cluster>.mongodb.net/database"
    collection specifies the collection in database that we want to import our file. If the specified collection doesn't exists, then a new collection will be created.
    file specifies the exact file which we want to import.
}

eg.: mongoimport --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1 --file=import_export_coll1.json

• mongodump --uri="" //--collections=""
{
    Here, you specify either URI or both URI and collection. If you only sepcify URI, You will get a 'dump' folder with the entire database. I you specify both URI and collection, you'll get that specific collection.
}

eg. mongodump --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1

• mongorestore --uri="" <path_to_db>
{
    here the path should be dump/import_export_db
}

eg. mongorestore --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" dump/import_export_db


## Mongo Query Language (MQL)
// All the commands are Case-Sensitive

• show dbs: shows all the present databases in the cluster
• show collection: shows all the collections in the database.

# Creating/ Deleting Databases
 • use <db_name>: used to move to a particular database. If the <db_name> is not present, it will create one.
 • db.createCollection(name,options): it is used to create a collection. options field is optional.
 • db.<collection_name>.drop(): it is used to delete a collection.
 • db.dropDatabase(): Deletes the database your currently in. First move to the database you want to drop using use <db_name> and then use this command. 

# find/ findOne
 • db.<collection_name>.findOne(query,projections): It returns the first occuring document that satisfies the query. Both the parameters, query and projections are optional. If no query is passed, it will return the first document from the specified collection

 • db.<collection_name>.find(query,projections): It returns the all the occuring document that satisfies the query. Both the parameters, query and projections are optional. If no query is passed, it will return all the documents from the specified collection.

 These queries are simply the key value pairs in JSON format that you want to filter.
 In the projections parameter, you specify the fields you wish to display as keys, and enter the value 1, if you like them to be displayed. Any field omitted will not be displayed ith the exception of the "_id" field. If the projection field is not passed, it shows all the fields of the database. 

# Use of $ in MQL:
    It precedes operators in MQL. {field: {operator: value}} Example: $lt --> Less than operator. {"salary": {$lt: 50000}}
    It also precedes field values. eg.: {$expr: {$gt: ["$tripdurantion", 400]}}
    Majorly used in Aggregation Pipeline.

# Operators in MQL:
 - Comparison Operator:
    • $eq: equal to
    • $ne: not equal to
    • $gt: greater than
    • $gte: greater than or equal to
    • $lt: less than
    • $lte: less than or equal to
    • $in: in, searches all the values that are passed in the provided array. ex.: {"salary": {$in: [50000, 100000]}}
    • $nin: not in

 - Logical Operator:
    • $and: returns all the documents that matches all the condition. Syntax: {operator: [{condition1}, {condition2}, ...]}. It is used by default as an implicit operator when no other operator or duplicate fields are specified.
    • $or: returrns all the documents that matches any of the specified condition. Syntax: {operator: [{condition1}, {condition2}, ...]}
    • $nor: returns all the documents that fails all of the conditions. Syntax: {operator: [{condition1}, {condition2}, ...]}
    • $not: returns all the documents that do not match the condition. Syntax: {$not: {conditon}}

 - $expr Operator: show me all the documents where the value of "field1" is the same as the value of "field2". Syntax: {$expr: {operator: [field, value]}}
 
 - Element Operators:
    • $exists: Returns documents that contains a specified field. Syntax: {field: {$exists: <boolean>}}
               I you pass <boolean> === true, and if that field exists then that document will be returned. If you pass <boolean> === false, and if that field does not exist then that document will be returned.
    • $type: Returns the fields that contains the values of a specific data type. Syntax: {field: {$type: [<BSON type1>, <BSON type2>,...]}} 
 
 - Cursor Methods:
    • count(): returns the number of documents in the result set. Syntax: db.collection.find({query}).count()
    • sort({parameters}): Orders the documents based on the specific field. Syntax: db.collection.find({query}).sort({"station_name": -1})  (Here, 1 means ascendind order and -1 means descending order.)
    • limit(number): Limits the number of documents that are returned. Syntax: db.collection.find({query}).limit(number)
    • skip(number): skips the first X number of documents. Syntax: db.collection.find({query}).skip(X)
    • size(): Size is like the count in that ir returns the count of the documents however it should be used when you've applied skip or limit to your records.

# Query Embedded Document:
    We'll use dot operator to access the fields inside object field. You can chain up if needed. 
    ex: db.inspections.find({"address.zip": 11358})

# Quering Arrays:
    