## Check more of everything on google. This is just that portion that you'll be using most of the time.

• show dbs : shows all the collections in your database.
• exit : to close the connection between MongoAtlas and CLI.

## NOTE ##  : All these commands will be pasted directly on the MongoShell 
// For any commands that are not listed in this list follow: https://docs.mongodb.com/database-tools/

## Command Line Interface Commands:

# mongoimport, mongoexport, mongodump and mongorestore
    mongoimport and mongoexport uses JSON format to import and export files.
    However, mongodump and mongorestore uses Binary JSON (BSON) format to import and export collections/databases to/from Mongo Atlas Cluster.

• mongoexport --uri="" --collection= --out=
{
    uri stands for Uniform Resource Identifier. Its syntax is --uri="mongodb+srv://user:password@<cluster>.mongodb.net/database"
    collection specifies the collection in database that we want to export from.
    out specifies the file type which we want to export as.
} 

eg.: mongoexport --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1 --out=import_export_coll1.json

• mongoimport --uri="" --collection= --file=
{
    uri stands for Uniform Resource Identifier. Its syntax is --uri="mongodb+srv://user:password@<cluster>.mongodb.net/database"
    collection specifies the collection in database that we want to import our file. If the specified collection doesn't exists, then a new collection will be created.
    file specifies the exact file which we want to import.
}

eg.: mongoimport --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1 --file=import_export_coll1.json

• mongodump --uri="" //--collections=""
{
    Here, you specify either URI or both URI and collection. If you only sepcify URI, You will get a 'dump' folder with the entire database. I you specify both URI and collection, you'll get that specific collection.
}

eg. mongodump --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" --collection=import_export_coll1

• mongorestore --uri="" <path_to_db>
{
    here the path should be dump/import_export_db
}

eg. mongorestore --uri="mongodb+srv://radheymishra13:psnwFyrF5ZZSpFum@sandbox.5lxke.mongodb.net/import_export_db" dump/import_export_db


-----------------------------------------------------------------------------------------------------------------------------


## Mongo Query Language (MQL)
// All the commands are Case-Sensitive

• show dbs: shows all the present databases in the cluster
• show collection: shows all the collections in the database.

# Creating/ Deleting Databases
 • use <db_name>: used to move to a particular database. If the <db_name> is not present, it will create one.
 • db.createCollection(name,options): it is used to create a collection. options field is optional.
 • db.<collection_name>.drop(): it is used to delete a collection.
 • db.dropDatabase(): Deletes the database your currently in. First move to the database you want to drop using use <db_name> and then use this command. 

# find/ findOne
 • db.<collection_name>.findOne(query,projections): It returns the first occuring document that satisfies the query. Both the parameters, query and projections are optional. If no query is passed, it will return the first document from the specified collection
 • db.<collection_name>.find(query,projections): It returns the all the occuring document that satisfies the query. Both the parameters, query and projections are optional. If no query is passed, it will return all the documents from the specified collection.

 These queries are simply the key value pairs in JSON format that you want to filter.
 In the projections parameter, you specify the fields you wish to display as keys, and enter the value 1, if you like them to be displayed. Any field omitted will not be displayed ith the exception of the "_id" field. If the projection field is not passed, it shows all the fields of the database.
 
 If you wish to learn more, check this out: https://www.mongodb.com/docs/manual/reference/operator/query/

# Use of $ in MQL:
    It precedes operators in MQL. {field: {operator: value}} Example: $lt --> Less than operator. {"salary": {$lt: 50000}}
    It also precedes field values. eg.: {$expr: {$gt: ["$tripdurantion", 400]}}
    Majorly used in Aggregation Pipeline.

# Operators in MQL:
 - Comparison Operator:
    • $eq: equal to
    • $ne: not equal to
    • $gt: greater than
    • $gte: greater than or equal to
    • $lt: less than
    • $lte: less than or equal to
    • $in: in, searches all the values that are passed in the provided array. ex.: {"salary": {$in: [50000, 100000]}}
    • $nin: not in

 - Logical Operator:
    • $and: returns all the documents that matches all the condition. Syntax: {operator: [{condition1}, {condition2}, ...]}. It is used by default as an implicit operator when no other operator or duplicate fields are specified.
    • $or: returrns all the documents that matches any of the specified condition. Syntax: {operator: [{condition1}, {condition2}, ...]}
    • $nor: returns all the documents that fails all of the conditions. Syntax: {operator: [{condition1}, {condition2}, ...]}
    • $not: returns all the documents that do not match the condition. Syntax: {$not: {conditon}}

 - $expr Operator: show me all the documents where the value of "field1" is the same as the value of "field2". Syntax: {$expr: {operator: [field, value]}}
 
 - Element Operators:
    • $exists: Returns documents that contains a specified field. Syntax: {field: {$exists: <boolean>}}
               If you pass <boolean> === true, and if that field exists then that document will be returned. If you pass <boolean> === false, and if that field does not exist then that document will be returned.
    • $type: Returns the fields that contains the values of a specific data type. Syntax: {field: {$type: [<BSON type1>, <BSON type2>,...]}} 
 
 - Cursor Methods:
    • count(): returns the number of documents in the result set. Syntax: db.collection.find({query}).count()
    • sort({parameters}): Orders the documents based on the specific field. Syntax: db.collection.find({query}).sort({"station_name": -1})  (Here, 1 means ascendind order and -1 means descending order.)
    • limit(number): Limits the number of documents that are returned. Syntax: db.collection.find({query}).limit(number)
    • skip(number): skips the first X number of documents. Syntax: db.collection.find({query}).skip(X)
    • size(): Size is like the count in that it returns the count of the documents however it should be used when you've applied skip or limit to your records.


# Query Embedded Document:
    We'll use dot operator to access the fields inside object field. You can chain up if needed. 
    ex: db.inspections.find({"address.zip": 11358})

# Querying Arrays:
    • If you want to display all the documents which contains a particular element in the array, use this example syntax: db.posts.find({"tags":"roof"},{"tags":1})
    • If you want to find a specific array you must specify all the elements that are present in that array. If the order is not maintained, then the desired output will not come. ex.  syntax: db.posts.find({"tags":["current", "quartz", "textbook", "bus", "roof", "lentil", "flute", "mile", "spain", "sagittarius"]},{"tags":1})
    • $all: returns all the documents where the value of a field is an array that contains all the specified elements and ordering doesn't matter. Syntax: db.collection.find({field: {$all: [value1, value2,...]}})
    • $size: returns all the documents that match the specified array size.   Syntax: db.collection.find({field: {$size: value}})
    • elemMatch: returns documents that contain an array field with an element that contains the matching criteria.  Syntax: db.collection.find({field: {$elemMatch: {{query1},{query2},...}}})  Ex. db.grades.find({"scores": {$elemMatch: {"type": "exam","score":{$gt: 80}}}})
    
## Inserting, Deleting and Updating Documents in a Collection:

# Inserting Document in a Collection: 
    • db.<collection_name>.insert(
        <document or array of documents>,
        { writeConcern: <document>,
          ordered: <boolean> 
        }
    )

    • We can create a document in a collection using the insert method.
    • We can create similar documents as long as they have different ids.
    • We can also specify the "_id". If you don, it will set a default auto generated value.
    • you can insert multiple documents using an array.
        ex.  db.<collection_name>.insert([{field: value, field: value}, {field: value, field: value}, {field: value, field: value}, ...])
    
# Deleting Documents in a Collection:
 - deleteOne():
        • db.collection.deleteOne( 
            <filter>, 
            {
                writeConcern: <document>,
                collation: <document>,
                hint: <document>
            }
        )

 - deleteMany():    
        • db.document.deleteMany(
            <filter>, 
            {
                writeConcern: <document>,
                collation: <document>
            }
        )
 - In deleteOne(), the first document that matches the condition gets deleted, while in deleteMany(), all the documents that matches the condition gets deleted.

# Updating documents in a Collection:
    • updateOne and updateMany():  They both follow the same syntax:
        db.collection.updateOne({filter}, {update}, {options})
        db.collection.updateMany({filter}, {update}, {options})
    
    • updateOne() update the first document that matches the specified filter, while updateMany() updates all the documents that matches the specified filter. 
    • If the filter parameter is left blank, then all the documents in the scope gets updated.
    • These queries instruct the MongoDB on how to update the document depend on the (update) parameter used.
    • For the options parameter, we'll discuss one called upsert. It takes a boolean value which is by feault set to false. if set to true, and if therer are noo document that follows your filter criteria then that document will be inserted. 
    
    # Update Operators:
        • $set: It replaces the existing field value with the one you specify. and you can update more than one field at a time. If we use $set for a field that does not exists, then that field will be created.
            Syntax: db.collection.updateOne({filter}, {$set: {field:value, field:value, ...}})
                    db.collection.updateMany({filter}, {$set: {field:value, field:value, ...}})
        • $unset: It removes the specified field or fiels that matches the criteria. 
            Syntax: db.collection.updateMany({filters}, {$unset: {field: value, field: value,....}}, {options})
        • $inc: This increments the value by a specified amount.
            Syntax: db.collection.updateMany({filters}, {$inc: {field: value}}, {options})
        • $rename: It renames the field.
            Syntax: db.collecion.updatemany({filters}, {$rename: {field: value, field: value, ....}}, {options})
        • $push: It pushes an element or a number of elements into an array.
            Syntax: db.collection.updateMany({filters}, {$push: {field: value(s)}}, {options})

        
-----------------------------------------------------------------------------------------------------------------------------


## Aggregation Framework

Aggregation framework allows for a more advanced operations, and its very powerful.
Pipelines in Aggregation Framework: These pipelines are considered to be opereations or stages. Each stage performs a different operations. Essentially, It is a sequence of operations.  

Syntax: db.collection.aggregate([{stage1}, {stage2}, {stage3}, ..., {stageN}], {options})

All these methods that we see are the stages in the aggregation framework.
    # $match: We can use $match at any stage of the pipeline stages, but it should usually come early in the pipeline. 
        Syntax: $match: {query}
            • In the query, you can laverage query operators that you have already covered in the MQL. 
            • You can use $match more than once.
            • It is basically the same as $find() in MQL, however it does not have a projection parameter. We have $project as a separate  operation in the aggregation framework. 

    # $project: It is just like the project parameter in the $find() in the MQL. But it is capable of doing more than the project parameter in the find field. 
        Syntax:  $project: {specification}
        • It can occur multiple times in the pipeline. 
        • Just like projection in find(), we can individually specify which field we want to show. 
        • Unlike the projection in find(), it can also create a new variable which can show the value of another field. Ex. [{$project: {"new_num_of_employee":"$number_of_employee"}}]
        • Similiarly we can also use it to re assign the values of already set fields to another fields. Ex. [{$project: {"name":1, "founded_year":"$name"}}]
        • Don't worry as these just change the projection or view of the document and not actually change the underlying document. 


    # Arithmatic Expression Operators:
        • $add: This expression is used to add numbers. This can also be used to add dates.
            Syntax: {$add: [expression1, expression2, ...., expressionN]}

        • $subtract: This returns the value of (value2 - value1). This can also be used on dates. It only takes 2 expressions though unlike $add.
            Syntax: {$subtract: [expression1, expression2]}

        • $divide: Returns the result of the first number divided by the second number.
            Syntax: {$divide: [expression1, expression2]}

        • $multiply: Returns the result of multiplication of passed numnbers. Accepts any number of arguements.
            Syntax: {$multiply: [expression1, expression2, ...., expressionN]}

        • $round: This command rounds the number to a specific number of decimals.
            Syntax: {$round: [expression, no_of_decimals]}

        There are many more Arithmetic Operator expressions such as $abs, $ceil, $exp, $floor, $ln, $log, $mod, $pow, $sqrt and $trunc that you can see on google.
        
    # String Expression Operators:
        • $concat: This results in a concatenated string of the passed strings. 
            Syntax: {$concat: [expression1, expression2, ..., expressionN]}
        
        • $toUpper: This results in an Uppercased string.
            Syntax: {$toUpper: expression}

        • $toLower: This results in an Lowercased string.
            Syntax: {$toLower: expression}
       
        • $regexMatch: Searches for a patterns and returns true if the pattern is found.
            Syntax: {$regexMatch: {input:expression, regex:expression, options:expression}}

        There are many more String Operator expressions such as $dateFromString, $dateToString, $indexOfByte, $indexOfCP, $ltrim, $substrBytes, $rtrim, $regexFind, $regexFindAll, $replaceOne, $replaceAll, $substrCP, $split, $strLenBytes, $strLenCP, $strcasecmp, $substr and $toString, and it is highly recommended to check the documentation for this whenever needed.

    # Date Expression Operators:
        • $dateAdd: This add time unit to date object.
            Syntax: {$dateAdd: {startDate:Expression, unit:Expression, amount:Expression, timezone:Expression}}
        timezoneis optional, rest are requires.

        • $dateDiff: This returns the difference between two dates.
            Syntax: {$dateDiff: {startDate:Expression, endDate:Expression, unit:Expression, timezone:Expression, startOfWeek:string}}
        timezone and startOfWeek are optional, rest are required.

        • $month: This returns the month for a date.
            {$month:Expression}

        There are many more Date Expression Operators such as $dateFromParts, $dateFromString, $dateSubtract, $dateToParts, $dateToString, $dateTrunc, $dayOfMonth, $dayOfWeek, $dayOfYear, $hour, $isoDayOfWeek, $isoWeek, $isoWeekYear, $milisecond, $minute, $second, $todate, $week and $year, and you should see the documentation for these when needed.
    
    # Comparison Expression Operators:
        - Same as all of those used in MQL.
            Syntax: {operator: [expression1, expression2,...]}
        - To use these operators using the former syntax, under the $match stage, you need to use $expr.But you can use it normally in $project.

    # Array Expression Operators:
        • $isArray: Returns true if the expression is an array.
            Syntax: {$isArray: [expression]}

        • $arrayElemAt: Returns the index of the element in array.
            Syntax: {$arrayElemAt: [array, index]}

        • $concatArrays: Concatenates the array together.
            Syntax: {$concatArrays: [array1, array2, ..., arrayN]}

        • $first: Returns the first element of the array.
            Syntax: {$first: expression}

        • $last: Returns the last element of the array.
            Syntax: {$last: expression}

        • $size: Returns the size of the array.
            Syntax: {$size: array}

        • $map: Applies an expression to each element of the array, and returns the array with applied results. 
            Syntax: {$map:{input:expression, as:string, in:expression}}
 
        There are many more operators such as $arrayToObject, $filter, $in, $indexOfArray, $objectToArray, $reduce, $reverseArray, $slice, $zip and $range, about whom you can find more on the documentation.

    # Conditional Expression Operator:
        • $cond: Evaluates a Boolean expression to return one of the two specified expressions. 
            Syntax: {$cond: {if: expression, then: true-case, else: false-case}}
        • $ifNull: provides a replacement expression value in placce of nulls in your expression.
            Syntax: {$ifNull: [expression1, expression2, expression3, ..., expressionN, replacement-expression-if-null]}
        • $switch: evaluates a series of conditions and when the condition is true is executes a specific expression. 
            Syntax: { $switch:
                {
                    branches: [
                        {case:expression, then:expression},
                        {case:expression, then:expression},
                        {case:expression, then:expression},
                        ...
                    ],
                    default: expression 
                }
            }

    # $addFields: Just like $project, it can add fields in the document and give value of one field to another field.
    With $addFields we can only add field to the pipeline, unlike the $project field, where it tells which fields to take on to the next stage,and which ones to remove. 
        Syntax: $addFields: {newField: expression,....}
    This field can appear multiple times in the pipeline.
    Similar to $project stage, $adddFields can take Expression Operators without the use of $expr.

    # $sort: It takes in a document of fields and each field has a value of 1(ascending) or -1(descending). 
        Syntax: $sort: {field1:sort_order, field2:sort_order,...,fieldN:sort_order}

    # $count: Counts all the documents that passed through the stage. It returns a afield that you've named in the $count stage and returns the number of document.
        Syntax: $count: string
    
    # $limit: It returns only the first N documents that pass through this stage. You specifiy the number ofg doucments that you like.
        Syntax: $limit: number
    
    # $skip: This stage skips the first N documents that you pass through this stage. You specify the number of documents that you want to skip.  
        Syntax: $skip:  number

    # $group: This stage groups documents by a specified _id expression and outpts a document for each distinct grouping of that expression.
    These outputted fields can hold calculated fields based on an accumulator expression ($avg, $sum, etc.).
        Syntax: $group: {
            "_id": expression,
            "field1": {accumulator1:expression1},
            "field2": {accumulator2:expression2},
            "field3": {accumulator3:expression3},
            ....
            "fieldN": {accumulatorN:expressionN},
        }
    This _id is not the unique identifier for the objects. This contains the expression that groups the documents. If the _id field is null, then it calculates the accumulated values for all the documents in the collection.
    You then have a number of fields which are computed based on an accumulator. This can be one or more fields.
     
     